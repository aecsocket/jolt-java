// Generated by jextract

package jolt.headers_d;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_SubShapeIDPair {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("body_id"),
            Constants$root.C_INT$LAYOUT.withName("sub_shape_id")
        ).withName("first"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("body_id"),
            Constants$root.C_INT$LAYOUT.withName("sub_shape_id")
        ).withName("second")
    ).withName("JPC_SubShapeIDPair");
    public static MemoryLayout $LAYOUT() {
        return JPC_SubShapeIDPair.$struct$LAYOUT;
    }
    public static class first {

        static final  GroupLayout first$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("body_id"),
            Constants$root.C_INT$LAYOUT.withName("sub_shape_id")
        );
        public static MemoryLayout $LAYOUT() {
            return first.first$struct$LAYOUT;
        }
        static final VarHandle body_id$VH = first$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("body_id"));
        public static VarHandle body_id$VH() {
            return first.body_id$VH;
        }
        public static int body_id$get(MemorySegment seg) {
            return (int)first.body_id$VH.get(seg);
        }
        public static void body_id$set( MemorySegment seg, int x) {
            first.body_id$VH.set(seg, x);
        }
        public static int body_id$get(MemorySegment seg, long index) {
            return (int)first.body_id$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void body_id$set(MemorySegment seg, long index, int x) {
            first.body_id$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle sub_shape_id$VH = first$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sub_shape_id"));
        public static VarHandle sub_shape_id$VH() {
            return first.sub_shape_id$VH;
        }
        public static int sub_shape_id$get(MemorySegment seg) {
            return (int)first.sub_shape_id$VH.get(seg);
        }
        public static void sub_shape_id$set( MemorySegment seg, int x) {
            first.sub_shape_id$VH.set(seg, x);
        }
        public static int sub_shape_id$get(MemorySegment seg, long index) {
            return (int)first.sub_shape_id$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sub_shape_id$set(MemorySegment seg, long index, int x) {
            first.sub_shape_id$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment first$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static class second {

        static final  GroupLayout second$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("body_id"),
            Constants$root.C_INT$LAYOUT.withName("sub_shape_id")
        );
        public static MemoryLayout $LAYOUT() {
            return second.second$struct$LAYOUT;
        }
        static final VarHandle body_id$VH = second$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("body_id"));
        public static VarHandle body_id$VH() {
            return second.body_id$VH;
        }
        public static int body_id$get(MemorySegment seg) {
            return (int)second.body_id$VH.get(seg);
        }
        public static void body_id$set( MemorySegment seg, int x) {
            second.body_id$VH.set(seg, x);
        }
        public static int body_id$get(MemorySegment seg, long index) {
            return (int)second.body_id$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void body_id$set(MemorySegment seg, long index, int x) {
            second.body_id$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle sub_shape_id$VH = second$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sub_shape_id"));
        public static VarHandle sub_shape_id$VH() {
            return second.sub_shape_id$VH;
        }
        public static int sub_shape_id$get(MemorySegment seg) {
            return (int)second.sub_shape_id$VH.get(seg);
        }
        public static void sub_shape_id$set( MemorySegment seg, int x) {
            second.sub_shape_id$VH.set(seg, x);
        }
        public static int sub_shape_id$get(MemorySegment seg, long index) {
            return (int)second.sub_shape_id$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sub_shape_id$set(MemorySegment seg, long index, int x) {
            second.sub_shape_id$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment second$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


