// Generated by jextract

package jolt.headers_d;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_CollideSettingsBase {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("active_edge_mode"),
        Constants$root.C_INT$LAYOUT.withName("collect_faces_mode"),
        Constants$root.C_FLOAT$LAYOUT.withName("collision_tolerance"),
        Constants$root.C_FLOAT$LAYOUT.withName("penetration_tolerance"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("active_edge_movement_direction"),
        MemoryLayout.paddingLayout(32)
    ).withName("JPC_CollideSettingsBase");
    public static MemoryLayout $LAYOUT() {
        return JPC_CollideSettingsBase.$struct$LAYOUT;
    }
    static final VarHandle active_edge_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("active_edge_mode"));
    public static VarHandle active_edge_mode$VH() {
        return JPC_CollideSettingsBase.active_edge_mode$VH;
    }
    public static int active_edge_mode$get(MemorySegment seg) {
        return (int)JPC_CollideSettingsBase.active_edge_mode$VH.get(seg);
    }
    public static void active_edge_mode$set( MemorySegment seg, int x) {
        JPC_CollideSettingsBase.active_edge_mode$VH.set(seg, x);
    }
    public static int active_edge_mode$get(MemorySegment seg, long index) {
        return (int)JPC_CollideSettingsBase.active_edge_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void active_edge_mode$set(MemorySegment seg, long index, int x) {
        JPC_CollideSettingsBase.active_edge_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle collect_faces_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("collect_faces_mode"));
    public static VarHandle collect_faces_mode$VH() {
        return JPC_CollideSettingsBase.collect_faces_mode$VH;
    }
    public static int collect_faces_mode$get(MemorySegment seg) {
        return (int)JPC_CollideSettingsBase.collect_faces_mode$VH.get(seg);
    }
    public static void collect_faces_mode$set( MemorySegment seg, int x) {
        JPC_CollideSettingsBase.collect_faces_mode$VH.set(seg, x);
    }
    public static int collect_faces_mode$get(MemorySegment seg, long index) {
        return (int)JPC_CollideSettingsBase.collect_faces_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void collect_faces_mode$set(MemorySegment seg, long index, int x) {
        JPC_CollideSettingsBase.collect_faces_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle collision_tolerance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("collision_tolerance"));
    public static VarHandle collision_tolerance$VH() {
        return JPC_CollideSettingsBase.collision_tolerance$VH;
    }
    public static float collision_tolerance$get(MemorySegment seg) {
        return (float)JPC_CollideSettingsBase.collision_tolerance$VH.get(seg);
    }
    public static void collision_tolerance$set( MemorySegment seg, float x) {
        JPC_CollideSettingsBase.collision_tolerance$VH.set(seg, x);
    }
    public static float collision_tolerance$get(MemorySegment seg, long index) {
        return (float)JPC_CollideSettingsBase.collision_tolerance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void collision_tolerance$set(MemorySegment seg, long index, float x) {
        JPC_CollideSettingsBase.collision_tolerance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle penetration_tolerance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("penetration_tolerance"));
    public static VarHandle penetration_tolerance$VH() {
        return JPC_CollideSettingsBase.penetration_tolerance$VH;
    }
    public static float penetration_tolerance$get(MemorySegment seg) {
        return (float)JPC_CollideSettingsBase.penetration_tolerance$VH.get(seg);
    }
    public static void penetration_tolerance$set( MemorySegment seg, float x) {
        JPC_CollideSettingsBase.penetration_tolerance$VH.set(seg, x);
    }
    public static float penetration_tolerance$get(MemorySegment seg, long index) {
        return (float)JPC_CollideSettingsBase.penetration_tolerance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void penetration_tolerance$set(MemorySegment seg, long index, float x) {
        JPC_CollideSettingsBase.penetration_tolerance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment active_edge_movement_direction$slice(MemorySegment seg) {
        return seg.asSlice(16, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


