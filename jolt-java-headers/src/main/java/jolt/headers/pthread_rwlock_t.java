// Generated by jextract

package jolt.headers;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class pthread_rwlock_t {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__readers"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__writers"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__wrphase_futex"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__writers_futex"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__pad3"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__pad4"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__cur_writer"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__shared"),
            jolt.headers.Constants$root.C_CHAR$LAYOUT.withName("__rwelision"),
            MemoryLayout.sequenceLayout(7, jolt.headers.Constants$root.C_CHAR$LAYOUT).withName("__pad1"),
            jolt.headers.Constants$root.C_LONG_LONG$LAYOUT.withName("__pad2"),
            jolt.headers.Constants$root.C_INT$LAYOUT.withName("__flags"),
            MemoryLayout.paddingLayout(32)
        ).withName("__data"),
        MemoryLayout.sequenceLayout(56, jolt.headers.Constants$root.C_CHAR$LAYOUT).withName("__size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__align")
    );
    public static MemoryLayout $LAYOUT() {
        return pthread_rwlock_t.$union$LAYOUT;
    }
    public static MemorySegment __data$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment __size$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    static final VarHandle __align$VH = $union$LAYOUT.varHandle(PathElement.groupElement("__align"));
    public static VarHandle __align$VH() {
        return pthread_rwlock_t.__align$VH;
    }
    public static long __align$get(MemorySegment seg) {
        return (long)pthread_rwlock_t.__align$VH.get(seg);
    }
    public static void __align$set( MemorySegment seg, long x) {
        pthread_rwlock_t.__align$VH.set(seg, x);
    }
    public static long __align$get(MemorySegment seg, long index) {
        return (long)pthread_rwlock_t.__align$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __align$set(MemorySegment seg, long index, long x) {
        pthread_rwlock_t.__align$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return jolt.headers.RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


