// Generated by jextract

package jolt.headers;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_BodyLockWrite {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("lock_interface"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex"),
        Constants$root.C_POINTER$LAYOUT.withName("body")
    ).withName("JPC_BodyLockWrite");
    public static MemoryLayout $LAYOUT() {
        return JPC_BodyLockWrite.$struct$LAYOUT;
    }
    static final VarHandle lock_interface$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lock_interface"));
    public static VarHandle lock_interface$VH() {
        return JPC_BodyLockWrite.lock_interface$VH;
    }
    public static MemoryAddress lock_interface$get(MemorySegment seg) {
        return (MemoryAddress)JPC_BodyLockWrite.lock_interface$VH.get(seg);
    }
    public static void lock_interface$set( MemorySegment seg, MemoryAddress x) {
        JPC_BodyLockWrite.lock_interface$VH.set(seg, x);
    }
    public static MemoryAddress lock_interface$get(MemorySegment seg, long index) {
        return (MemoryAddress)JPC_BodyLockWrite.lock_interface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lock_interface$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_BodyLockWrite.lock_interface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mutex$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("mutex"));
    public static VarHandle mutex$VH() {
        return JPC_BodyLockWrite.mutex$VH;
    }
    public static MemoryAddress mutex$get(MemorySegment seg) {
        return (MemoryAddress)JPC_BodyLockWrite.mutex$VH.get(seg);
    }
    public static void mutex$set( MemorySegment seg, MemoryAddress x) {
        JPC_BodyLockWrite.mutex$VH.set(seg, x);
    }
    public static MemoryAddress mutex$get(MemorySegment seg, long index) {
        return (MemoryAddress)JPC_BodyLockWrite.mutex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mutex$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_BodyLockWrite.mutex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle body$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("body"));
    public static VarHandle body$VH() {
        return JPC_BodyLockWrite.body$VH;
    }
    public static MemoryAddress body$get(MemorySegment seg) {
        return (MemoryAddress)JPC_BodyLockWrite.body$VH.get(seg);
    }
    public static void body$set( MemorySegment seg, MemoryAddress x) {
        JPC_BodyLockWrite.body$VH.set(seg, x);
    }
    public static MemoryAddress body$get(MemorySegment seg, long index) {
        return (MemoryAddress)JPC_BodyLockWrite.body$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void body$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_BodyLockWrite.body$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


