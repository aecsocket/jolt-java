// Generated by jextract

package jolt.headers;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_ContactSettings {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        jolt.headers.Constants$root.C_FLOAT$LAYOUT.withName("combined_friction"),
        jolt.headers.Constants$root.C_FLOAT$LAYOUT.withName("combined_restitution"),
        Constants$root.C_BOOL$LAYOUT.withName("is_sensor"),
        MemoryLayout.paddingLayout(24)
    ).withName("JPC_ContactSettings");
    public static MemoryLayout $LAYOUT() {
        return JPC_ContactSettings.$struct$LAYOUT;
    }
    static final VarHandle combined_friction$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("combined_friction"));
    public static VarHandle combined_friction$VH() {
        return JPC_ContactSettings.combined_friction$VH;
    }
    public static float combined_friction$get(MemorySegment seg) {
        return (float)JPC_ContactSettings.combined_friction$VH.get(seg);
    }
    public static void combined_friction$set( MemorySegment seg, float x) {
        JPC_ContactSettings.combined_friction$VH.set(seg, x);
    }
    public static float combined_friction$get(MemorySegment seg, long index) {
        return (float)JPC_ContactSettings.combined_friction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void combined_friction$set(MemorySegment seg, long index, float x) {
        JPC_ContactSettings.combined_friction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle combined_restitution$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("combined_restitution"));
    public static VarHandle combined_restitution$VH() {
        return JPC_ContactSettings.combined_restitution$VH;
    }
    public static float combined_restitution$get(MemorySegment seg) {
        return (float)JPC_ContactSettings.combined_restitution$VH.get(seg);
    }
    public static void combined_restitution$set( MemorySegment seg, float x) {
        JPC_ContactSettings.combined_restitution$VH.set(seg, x);
    }
    public static float combined_restitution$get(MemorySegment seg, long index) {
        return (float)JPC_ContactSettings.combined_restitution$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void combined_restitution$set(MemorySegment seg, long index, float x) {
        JPC_ContactSettings.combined_restitution$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_sensor$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("is_sensor"));
    public static VarHandle is_sensor$VH() {
        return JPC_ContactSettings.is_sensor$VH;
    }
    public static boolean is_sensor$get(MemorySegment seg) {
        return (boolean)JPC_ContactSettings.is_sensor$VH.get(seg);
    }
    public static void is_sensor$set( MemorySegment seg, boolean x) {
        JPC_ContactSettings.is_sensor$VH.set(seg, x);
    }
    public static boolean is_sensor$get(MemorySegment seg, long index) {
        return (boolean)JPC_ContactSettings.is_sensor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_sensor$set(MemorySegment seg, long index, boolean x) {
        JPC_ContactSettings.is_sensor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return jolt.headers.RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


