// Generated by jextract

package jolt.headers;

import java.lang.foreign.*;

public interface JPC_AlignedFreeFunction {

    void apply(MemoryAddress in_block);
    static MemorySegment allocate(JPC_AlignedFreeFunction fi, MemorySession session) {
        return jolt.headers.RuntimeHelper.upcallStub(JPC_AlignedFreeFunction.class, fi, jolt.headers.constants$19.JPC_AlignedFreeFunction$FUNC, session);
    }
    static JPC_AlignedFreeFunction ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (MemoryAddress _in_block) -> {
            try {
                jolt.headers.constants$19.JPC_AlignedFreeFunction$MH.invokeExact((Addressable)symbol, (Addressable)_in_block);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


