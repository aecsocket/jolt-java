// Generated by jextract

package jolt.headers;

import java.lang.foreign.*;

public interface JPC_AllocateFunction {

    Addressable apply(long in_size);
    static MemorySegment allocate(JPC_AllocateFunction fi, MemorySession session) {
        return jolt.headers.RuntimeHelper.upcallStub(JPC_AllocateFunction.class, fi, jolt.headers.constants$18.JPC_AllocateFunction$FUNC, session);
    }
    static JPC_AllocateFunction ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (long _in_size) -> {
            try {
                return (Addressable)(MemoryAddress) jolt.headers.constants$18.JPC_AllocateFunction$MH.invokeExact((Addressable)symbol, _in_size);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


