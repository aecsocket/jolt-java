// Generated by jextract

package jolt.headers;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_TransformedShape {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("shape_position_com"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("shape_rotation"),
        Constants$root.C_POINTER$LAYOUT.withName("shape"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("shape_scale"),
        Constants$root.C_INT$LAYOUT.withName("body_id"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("id"),
            Constants$root.C_INT$LAYOUT.withName("current_bit")
        ).withName("sub_shape_id_creator")
    ).withName("JPC_TransformedShape");
    public static MemoryLayout $LAYOUT() {
        return JPC_TransformedShape.$struct$LAYOUT;
    }
    public static MemorySegment shape_position_com$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment shape_rotation$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle shape$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("shape"));
    public static VarHandle shape$VH() {
        return JPC_TransformedShape.shape$VH;
    }
    public static MemoryAddress shape$get(MemorySegment seg) {
        return (MemoryAddress)JPC_TransformedShape.shape$VH.get(seg);
    }
    public static void shape$set( MemorySegment seg, MemoryAddress x) {
        JPC_TransformedShape.shape$VH.set(seg, x);
    }
    public static MemoryAddress shape$get(MemorySegment seg, long index) {
        return (MemoryAddress)JPC_TransformedShape.shape$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shape$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_TransformedShape.shape$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment shape_scale$slice(MemorySegment seg) {
        return seg.asSlice(40, 12);
    }
    static final VarHandle body_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("body_id"));
    public static VarHandle body_id$VH() {
        return JPC_TransformedShape.body_id$VH;
    }
    public static int body_id$get(MemorySegment seg) {
        return (int)JPC_TransformedShape.body_id$VH.get(seg);
    }
    public static void body_id$set( MemorySegment seg, int x) {
        JPC_TransformedShape.body_id$VH.set(seg, x);
    }
    public static int body_id$get(MemorySegment seg, long index) {
        return (int)JPC_TransformedShape.body_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void body_id$set(MemorySegment seg, long index, int x) {
        JPC_TransformedShape.body_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sub_shape_id_creator$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


