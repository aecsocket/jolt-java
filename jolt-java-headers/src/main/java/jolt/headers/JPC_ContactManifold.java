// Generated by jextract

package jolt.headers;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
public class JPC_ContactManifold {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("base_offset"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("normal"),
        Constants$root.C_FLOAT$LAYOUT.withName("penetration_depth"),
        Constants$root.C_INT$LAYOUT.withName("shape1_sub_shape_id"),
        Constants$root.C_INT$LAYOUT.withName("shape2_sub_shape_id"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("num_points"),
            MemoryLayout.paddingLayout(96),
            MemoryLayout.sequenceLayout(64, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("points")
        ).withName("shape1_relative_contact"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("num_points"),
            MemoryLayout.paddingLayout(96),
            MemoryLayout.sequenceLayout(64, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("points")
        ).withName("shape2_relative_contact")
    ).withName("JPC_ContactManifold");
    public static MemoryLayout $LAYOUT() {
        return JPC_ContactManifold.$struct$LAYOUT;
    }
    public static MemorySegment base_offset$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment normal$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle penetration_depth$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("penetration_depth"));
    public static VarHandle penetration_depth$VH() {
        return JPC_ContactManifold.penetration_depth$VH;
    }
    public static float penetration_depth$get(MemorySegment seg) {
        return (float)JPC_ContactManifold.penetration_depth$VH.get(seg);
    }
    public static void penetration_depth$set( MemorySegment seg, float x) {
        JPC_ContactManifold.penetration_depth$VH.set(seg, x);
    }
    public static float penetration_depth$get(MemorySegment seg, long index) {
        return (float)JPC_ContactManifold.penetration_depth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void penetration_depth$set(MemorySegment seg, long index, float x) {
        JPC_ContactManifold.penetration_depth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle shape1_sub_shape_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("shape1_sub_shape_id"));
    public static VarHandle shape1_sub_shape_id$VH() {
        return JPC_ContactManifold.shape1_sub_shape_id$VH;
    }
    public static int shape1_sub_shape_id$get(MemorySegment seg) {
        return (int)JPC_ContactManifold.shape1_sub_shape_id$VH.get(seg);
    }
    public static void shape1_sub_shape_id$set( MemorySegment seg, int x) {
        JPC_ContactManifold.shape1_sub_shape_id$VH.set(seg, x);
    }
    public static int shape1_sub_shape_id$get(MemorySegment seg, long index) {
        return (int)JPC_ContactManifold.shape1_sub_shape_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shape1_sub_shape_id$set(MemorySegment seg, long index, int x) {
        JPC_ContactManifold.shape1_sub_shape_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle shape2_sub_shape_id$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("shape2_sub_shape_id"));
    public static VarHandle shape2_sub_shape_id$VH() {
        return JPC_ContactManifold.shape2_sub_shape_id$VH;
    }
    public static int shape2_sub_shape_id$get(MemorySegment seg) {
        return (int)JPC_ContactManifold.shape2_sub_shape_id$VH.get(seg);
    }
    public static void shape2_sub_shape_id$set( MemorySegment seg, int x) {
        JPC_ContactManifold.shape2_sub_shape_id$VH.set(seg, x);
    }
    public static int shape2_sub_shape_id$get(MemorySegment seg, long index) {
        return (int)JPC_ContactManifold.shape2_sub_shape_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shape2_sub_shape_id$set(MemorySegment seg, long index, int x) {
        JPC_ContactManifold.shape2_sub_shape_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class shape1_relative_contact {

        static final  GroupLayout shape1_relative_contact$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("num_points"),
            MemoryLayout.paddingLayout(96),
            MemoryLayout.sequenceLayout(64, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("points")
        );
        public static MemoryLayout $LAYOUT() {
            return shape1_relative_contact.shape1_relative_contact$struct$LAYOUT;
        }
        static final VarHandle num_points$VH = shape1_relative_contact$struct$LAYOUT.varHandle(PathElement.groupElement("num_points"));
        public static VarHandle num_points$VH() {
            return shape1_relative_contact.num_points$VH;
        }
        public static int num_points$get(MemorySegment seg) {
            return (int)shape1_relative_contact.num_points$VH.get(seg);
        }
        public static void num_points$set( MemorySegment seg, int x) {
            shape1_relative_contact.num_points$VH.set(seg, x);
        }
        public static int num_points$get(MemorySegment seg, long index) {
            return (int)shape1_relative_contact.num_points$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void num_points$set(MemorySegment seg, long index, int x) {
            shape1_relative_contact.num_points$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment points$slice(MemorySegment seg) {
            return seg.asSlice(16, 1024);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment shape1_relative_contact$slice(MemorySegment seg) {
        return seg.asSlice(48, 1040);
    }
    public static class shape2_relative_contact {

        static final  GroupLayout shape2_relative_contact$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("num_points"),
            MemoryLayout.paddingLayout(96),
            MemoryLayout.sequenceLayout(64, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("points")
        );
        public static MemoryLayout $LAYOUT() {
            return shape2_relative_contact.shape2_relative_contact$struct$LAYOUT;
        }
        static final VarHandle num_points$VH = shape2_relative_contact$struct$LAYOUT.varHandle(PathElement.groupElement("num_points"));
        public static VarHandle num_points$VH() {
            return shape2_relative_contact.num_points$VH;
        }
        public static int num_points$get(MemorySegment seg) {
            return (int)shape2_relative_contact.num_points$VH.get(seg);
        }
        public static void num_points$set( MemorySegment seg, int x) {
            shape2_relative_contact.num_points$VH.set(seg, x);
        }
        public static int num_points$get(MemorySegment seg, long index) {
            return (int)shape2_relative_contact.num_points$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void num_points$set(MemorySegment seg, long index, int x) {
            shape2_relative_contact.num_points$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment points$slice(MemorySegment seg) {
            return seg.asSlice(16, 1024);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment shape2_relative_contact$slice(MemorySegment seg) {
        return seg.asSlice(1088, 1040);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


