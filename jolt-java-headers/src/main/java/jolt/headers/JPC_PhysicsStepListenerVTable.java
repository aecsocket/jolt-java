// Generated by jextract

package jolt.headers;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_PhysicsStepListenerVTable {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("__unused0"),
        Constants$root.C_POINTER$LAYOUT.withName("__unused1"),
        Constants$root.C_POINTER$LAYOUT.withName("OnStep")
    ).withName("JPC_PhysicsStepListenerVTable");
    public static MemoryLayout $LAYOUT() {
        return JPC_PhysicsStepListenerVTable.$struct$LAYOUT;
    }
    static final VarHandle __unused0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__unused0"));
    public static VarHandle __unused0$VH() {
        return JPC_PhysicsStepListenerVTable.__unused0$VH;
    }
    public static MemoryAddress __unused0$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JPC_PhysicsStepListenerVTable.__unused0$VH.get(seg);
    }
    public static void __unused0$set( MemorySegment seg, MemoryAddress x) {
        JPC_PhysicsStepListenerVTable.__unused0$VH.set(seg, x);
    }
    public static MemoryAddress __unused0$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JPC_PhysicsStepListenerVTable.__unused0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __unused0$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_PhysicsStepListenerVTable.__unused0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __unused1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__unused1"));
    public static VarHandle __unused1$VH() {
        return JPC_PhysicsStepListenerVTable.__unused1$VH;
    }
    public static MemoryAddress __unused1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JPC_PhysicsStepListenerVTable.__unused1$VH.get(seg);
    }
    public static void __unused1$set( MemorySegment seg, MemoryAddress x) {
        JPC_PhysicsStepListenerVTable.__unused1$VH.set(seg, x);
    }
    public static MemoryAddress __unused1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JPC_PhysicsStepListenerVTable.__unused1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __unused1$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_PhysicsStepListenerVTable.__unused1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor OnStep$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnStep$MH = RuntimeHelper.downcallHandle(
        JPC_PhysicsStepListenerVTable.OnStep$FUNC
    );
    public interface OnStep {

        void apply(java.lang.foreign.MemoryAddress _x0, float _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(OnStep fi, MemorySession session) {
            return RuntimeHelper.upcallStub(OnStep.class, fi, JPC_PhysicsStepListenerVTable.OnStep$FUNC, session);
        }
        static OnStep ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, float __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    JPC_PhysicsStepListenerVTable.OnStep$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnStep$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnStep"));
    public static VarHandle OnStep$VH() {
        return JPC_PhysicsStepListenerVTable.OnStep$VH;
    }
    public static MemoryAddress OnStep$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JPC_PhysicsStepListenerVTable.OnStep$VH.get(seg);
    }
    public static void OnStep$set( MemorySegment seg, MemoryAddress x) {
        JPC_PhysicsStepListenerVTable.OnStep$VH.set(seg, x);
    }
    public static MemoryAddress OnStep$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JPC_PhysicsStepListenerVTable.OnStep$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnStep$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_PhysicsStepListenerVTable.OnStep$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnStep OnStep (MemorySegment segment, MemorySession session) {
        return OnStep.ofAddress(OnStep$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


