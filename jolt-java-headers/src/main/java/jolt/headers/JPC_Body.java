// Generated by jextract

package jolt.headers;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_Body {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("position"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("rotation"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("bounds_min"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("bounds_max"),
        Constants$root.C_POINTER$LAYOUT.withName("shape"),
        Constants$root.C_POINTER$LAYOUT.withName("motion_properties"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("user_data"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("filter"),
            Constants$root.C_INT$LAYOUT.withName("group_id"),
            Constants$root.C_INT$LAYOUT.withName("sub_group_id")
        ).withName("collision_group"),
        Constants$root.C_FLOAT$LAYOUT.withName("friction"),
        Constants$root.C_FLOAT$LAYOUT.withName("restitution"),
        Constants$root.C_INT$LAYOUT.withName("id"),
        Constants$root.C_SHORT$LAYOUT.withName("object_layer"),
        Constants$root.C_CHAR$LAYOUT.withName("broad_phase_layer"),
        Constants$root.C_CHAR$LAYOUT.withName("motion_type"),
        Constants$root.C_CHAR$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(56)
    ).withName("JPC_Body");
    public static MemoryLayout $LAYOUT() {
        return JPC_Body.$struct$LAYOUT;
    }
    public static MemorySegment position$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment rotation$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment bounds_min$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static MemorySegment bounds_max$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    static final VarHandle shape$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("shape"));
    public static VarHandle shape$VH() {
        return JPC_Body.shape$VH;
    }
    public static MemoryAddress shape$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JPC_Body.shape$VH.get(seg);
    }
    public static void shape$set( MemorySegment seg, MemoryAddress x) {
        JPC_Body.shape$VH.set(seg, x);
    }
    public static MemoryAddress shape$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JPC_Body.shape$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shape$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_Body.shape$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle motion_properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("motion_properties"));
    public static VarHandle motion_properties$VH() {
        return JPC_Body.motion_properties$VH;
    }
    public static MemoryAddress motion_properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JPC_Body.motion_properties$VH.get(seg);
    }
    public static void motion_properties$set( MemorySegment seg, MemoryAddress x) {
        JPC_Body.motion_properties$VH.set(seg, x);
    }
    public static MemoryAddress motion_properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JPC_Body.motion_properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void motion_properties$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_Body.motion_properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_data"));
    public static VarHandle user_data$VH() {
        return JPC_Body.user_data$VH;
    }
    public static long user_data$get(MemorySegment seg) {
        return (long)JPC_Body.user_data$VH.get(seg);
    }
    public static void user_data$set( MemorySegment seg, long x) {
        JPC_Body.user_data$VH.set(seg, x);
    }
    public static long user_data$get(MemorySegment seg, long index) {
        return (long)JPC_Body.user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_data$set(MemorySegment seg, long index, long x) {
        JPC_Body.user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment collision_group$slice(MemorySegment seg) {
        return seg.asSlice(88, 16);
    }
    static final VarHandle friction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("friction"));
    public static VarHandle friction$VH() {
        return JPC_Body.friction$VH;
    }
    public static float friction$get(MemorySegment seg) {
        return (float)JPC_Body.friction$VH.get(seg);
    }
    public static void friction$set( MemorySegment seg, float x) {
        JPC_Body.friction$VH.set(seg, x);
    }
    public static float friction$get(MemorySegment seg, long index) {
        return (float)JPC_Body.friction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void friction$set(MemorySegment seg, long index, float x) {
        JPC_Body.friction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle restitution$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("restitution"));
    public static VarHandle restitution$VH() {
        return JPC_Body.restitution$VH;
    }
    public static float restitution$get(MemorySegment seg) {
        return (float)JPC_Body.restitution$VH.get(seg);
    }
    public static void restitution$set( MemorySegment seg, float x) {
        JPC_Body.restitution$VH.set(seg, x);
    }
    public static float restitution$get(MemorySegment seg, long index) {
        return (float)JPC_Body.restitution$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void restitution$set(MemorySegment seg, long index, float x) {
        JPC_Body.restitution$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return JPC_Body.id$VH;
    }
    public static int id$get(MemorySegment seg) {
        return (int)JPC_Body.id$VH.get(seg);
    }
    public static void id$set( MemorySegment seg, int x) {
        JPC_Body.id$VH.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)JPC_Body.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        JPC_Body.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle object_layer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("object_layer"));
    public static VarHandle object_layer$VH() {
        return JPC_Body.object_layer$VH;
    }
    public static short object_layer$get(MemorySegment seg) {
        return (short)JPC_Body.object_layer$VH.get(seg);
    }
    public static void object_layer$set( MemorySegment seg, short x) {
        JPC_Body.object_layer$VH.set(seg, x);
    }
    public static short object_layer$get(MemorySegment seg, long index) {
        return (short)JPC_Body.object_layer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void object_layer$set(MemorySegment seg, long index, short x) {
        JPC_Body.object_layer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle broad_phase_layer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("broad_phase_layer"));
    public static VarHandle broad_phase_layer$VH() {
        return JPC_Body.broad_phase_layer$VH;
    }
    public static byte broad_phase_layer$get(MemorySegment seg) {
        return (byte)JPC_Body.broad_phase_layer$VH.get(seg);
    }
    public static void broad_phase_layer$set( MemorySegment seg, byte x) {
        JPC_Body.broad_phase_layer$VH.set(seg, x);
    }
    public static byte broad_phase_layer$get(MemorySegment seg, long index) {
        return (byte)JPC_Body.broad_phase_layer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void broad_phase_layer$set(MemorySegment seg, long index, byte x) {
        JPC_Body.broad_phase_layer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle motion_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("motion_type"));
    public static VarHandle motion_type$VH() {
        return JPC_Body.motion_type$VH;
    }
    public static byte motion_type$get(MemorySegment seg) {
        return (byte)JPC_Body.motion_type$VH.get(seg);
    }
    public static void motion_type$set( MemorySegment seg, byte x) {
        JPC_Body.motion_type$VH.set(seg, x);
    }
    public static byte motion_type$get(MemorySegment seg, long index) {
        return (byte)JPC_Body.motion_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void motion_type$set(MemorySegment seg, long index, byte x) {
        JPC_Body.motion_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return JPC_Body.flags$VH;
    }
    public static byte flags$get(MemorySegment seg) {
        return (byte)JPC_Body.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, byte x) {
        JPC_Body.flags$VH.set(seg, x);
    }
    public static byte flags$get(MemorySegment seg, long index) {
        return (byte)JPC_Body.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, byte x) {
        JPC_Body.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


