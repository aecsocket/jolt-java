// Generated by jextract

package jolt.headers_f;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_ShapeCastResult {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("shape1_contact_point"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("shape2_contact_point"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("penetration_axis"),
            Constants$root.C_FLOAT$LAYOUT.withName("penetration_depth"),
            Constants$root.C_INT$LAYOUT.withName("shape1_sub_shape_id"),
            Constants$root.C_INT$LAYOUT.withName("shape2_sub_shape_id"),
            Constants$root.C_INT$LAYOUT.withName("body2_id"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("num_points"),
                MemoryLayout.paddingLayout(96),
                MemoryLayout.sequenceLayout(32, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("points")
            ).withName("shape1_face"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("num_points"),
                MemoryLayout.paddingLayout(96),
                MemoryLayout.sequenceLayout(32, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("points")
            ).withName("shape2_face")
        ).withName("base"),
        Constants$root.C_FLOAT$LAYOUT.withName("fraction"),
        Constants$root.C_BOOL$LAYOUT.withName("is_back_face_hit"),
        MemoryLayout.paddingLayout(88)
    ).withName("JPC_ShapeCastResult");
    public static MemoryLayout $LAYOUT() {
        return JPC_ShapeCastResult.$struct$LAYOUT;
    }
    public static MemorySegment base$slice(MemorySegment seg) {
        return seg.asSlice(0, 1120);
    }
    static final VarHandle fraction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fraction"));
    public static VarHandle fraction$VH() {
        return JPC_ShapeCastResult.fraction$VH;
    }
    public static float fraction$get(MemorySegment seg) {
        return (float)JPC_ShapeCastResult.fraction$VH.get(seg);
    }
    public static void fraction$set( MemorySegment seg, float x) {
        JPC_ShapeCastResult.fraction$VH.set(seg, x);
    }
    public static float fraction$get(MemorySegment seg, long index) {
        return (float)JPC_ShapeCastResult.fraction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fraction$set(MemorySegment seg, long index, float x) {
        JPC_ShapeCastResult.fraction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_back_face_hit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_back_face_hit"));
    public static VarHandle is_back_face_hit$VH() {
        return JPC_ShapeCastResult.is_back_face_hit$VH;
    }
    public static boolean is_back_face_hit$get(MemorySegment seg) {
        return (boolean)JPC_ShapeCastResult.is_back_face_hit$VH.get(seg);
    }
    public static void is_back_face_hit$set( MemorySegment seg, boolean x) {
        JPC_ShapeCastResult.is_back_face_hit$VH.set(seg, x);
    }
    public static boolean is_back_face_hit$get(MemorySegment seg, long index) {
        return (boolean)JPC_ShapeCastResult.is_back_face_hit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_back_face_hit$set(MemorySegment seg, long index, boolean x) {
        JPC_ShapeCastResult.is_back_face_hit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


