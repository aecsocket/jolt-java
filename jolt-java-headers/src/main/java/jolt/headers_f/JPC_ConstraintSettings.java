// Generated by jextract

package jolt.headers_f;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_ConstraintSettings {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("vtable"),
        Constants$root.C_BOOL$LAYOUT.withName("enabled"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_INT$LAYOUT.withName("num_velocity_steps_override"),
        Constants$root.C_INT$LAYOUT.withName("num_position_steps_override"),
        Constants$root.C_FLOAT$LAYOUT.withName("draw_constraint_size")
    ).withName("JPC_ConstraintSettings");
    public static MemoryLayout $LAYOUT() {
        return JPC_ConstraintSettings.$struct$LAYOUT;
    }
    static final VarHandle vtable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vtable"));
    public static VarHandle vtable$VH() {
        return JPC_ConstraintSettings.vtable$VH;
    }
    public static MemoryAddress vtable$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JPC_ConstraintSettings.vtable$VH.get(seg);
    }
    public static void vtable$set( MemorySegment seg, MemoryAddress x) {
        JPC_ConstraintSettings.vtable$VH.set(seg, x);
    }
    public static MemoryAddress vtable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JPC_ConstraintSettings.vtable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vtable$set(MemorySegment seg, long index, MemoryAddress x) {
        JPC_ConstraintSettings.vtable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enabled$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enabled"));
    public static VarHandle enabled$VH() {
        return JPC_ConstraintSettings.enabled$VH;
    }
    public static boolean enabled$get(MemorySegment seg) {
        return (boolean)JPC_ConstraintSettings.enabled$VH.get(seg);
    }
    public static void enabled$set( MemorySegment seg, boolean x) {
        JPC_ConstraintSettings.enabled$VH.set(seg, x);
    }
    public static boolean enabled$get(MemorySegment seg, long index) {
        return (boolean)JPC_ConstraintSettings.enabled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enabled$set(MemorySegment seg, long index, boolean x) {
        JPC_ConstraintSettings.enabled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_velocity_steps_override$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_velocity_steps_override"));
    public static VarHandle num_velocity_steps_override$VH() {
        return JPC_ConstraintSettings.num_velocity_steps_override$VH;
    }
    public static int num_velocity_steps_override$get(MemorySegment seg) {
        return (int)JPC_ConstraintSettings.num_velocity_steps_override$VH.get(seg);
    }
    public static void num_velocity_steps_override$set( MemorySegment seg, int x) {
        JPC_ConstraintSettings.num_velocity_steps_override$VH.set(seg, x);
    }
    public static int num_velocity_steps_override$get(MemorySegment seg, long index) {
        return (int)JPC_ConstraintSettings.num_velocity_steps_override$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_velocity_steps_override$set(MemorySegment seg, long index, int x) {
        JPC_ConstraintSettings.num_velocity_steps_override$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_position_steps_override$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_position_steps_override"));
    public static VarHandle num_position_steps_override$VH() {
        return JPC_ConstraintSettings.num_position_steps_override$VH;
    }
    public static int num_position_steps_override$get(MemorySegment seg) {
        return (int)JPC_ConstraintSettings.num_position_steps_override$VH.get(seg);
    }
    public static void num_position_steps_override$set( MemorySegment seg, int x) {
        JPC_ConstraintSettings.num_position_steps_override$VH.set(seg, x);
    }
    public static int num_position_steps_override$get(MemorySegment seg, long index) {
        return (int)JPC_ConstraintSettings.num_position_steps_override$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_position_steps_override$set(MemorySegment seg, long index, int x) {
        JPC_ConstraintSettings.num_position_steps_override$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle draw_constraint_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_constraint_size"));
    public static VarHandle draw_constraint_size$VH() {
        return JPC_ConstraintSettings.draw_constraint_size$VH;
    }
    public static float draw_constraint_size$get(MemorySegment seg) {
        return (float)JPC_ConstraintSettings.draw_constraint_size$VH.get(seg);
    }
    public static void draw_constraint_size$set( MemorySegment seg, float x) {
        JPC_ConstraintSettings.draw_constraint_size$VH.set(seg, x);
    }
    public static float draw_constraint_size$get(MemorySegment seg, long index) {
        return (float)JPC_ConstraintSettings.draw_constraint_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_constraint_size$set(MemorySegment seg, long index, float x) {
        JPC_ConstraintSettings.draw_constraint_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


