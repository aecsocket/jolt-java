// Generated by jextract

package jolt.headers_f;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JPC_CollideShapeSettings {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("active_edge_mode"),
            Constants$root.C_INT$LAYOUT.withName("collect_faces_mode"),
            Constants$root.C_FLOAT$LAYOUT.withName("collision_tolerance"),
            Constants$root.C_FLOAT$LAYOUT.withName("penetration_tolerance"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("active_edge_movement_direction"),
            MemoryLayout.paddingLayout(32)
        ).withName("base"),
        Constants$root.C_FLOAT$LAYOUT.withName("max_separation_distance"),
        Constants$root.C_CHAR$LAYOUT.withName("back_face_mode"),
        MemoryLayout.paddingLayout(88)
    ).withName("JPC_CollideShapeSettings");
    public static MemoryLayout $LAYOUT() {
        return JPC_CollideShapeSettings.$struct$LAYOUT;
    }
    public static MemorySegment base$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    static final VarHandle max_separation_distance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_separation_distance"));
    public static VarHandle max_separation_distance$VH() {
        return JPC_CollideShapeSettings.max_separation_distance$VH;
    }
    public static float max_separation_distance$get(MemorySegment seg) {
        return (float)JPC_CollideShapeSettings.max_separation_distance$VH.get(seg);
    }
    public static void max_separation_distance$set( MemorySegment seg, float x) {
        JPC_CollideShapeSettings.max_separation_distance$VH.set(seg, x);
    }
    public static float max_separation_distance$get(MemorySegment seg, long index) {
        return (float)JPC_CollideShapeSettings.max_separation_distance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_separation_distance$set(MemorySegment seg, long index, float x) {
        JPC_CollideShapeSettings.max_separation_distance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle back_face_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("back_face_mode"));
    public static VarHandle back_face_mode$VH() {
        return JPC_CollideShapeSettings.back_face_mode$VH;
    }
    public static byte back_face_mode$get(MemorySegment seg) {
        return (byte)JPC_CollideShapeSettings.back_face_mode$VH.get(seg);
    }
    public static void back_face_mode$set( MemorySegment seg, byte x) {
        JPC_CollideShapeSettings.back_face_mode$VH.set(seg, x);
    }
    public static byte back_face_mode$get(MemorySegment seg, long index) {
        return (byte)JPC_CollideShapeSettings.back_face_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void back_face_mode$set(MemorySegment seg, long index, byte x) {
        JPC_CollideShapeSettings.back_face_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


